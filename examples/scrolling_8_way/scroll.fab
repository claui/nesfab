/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// Enum values:
ct U SCROLL_NONE = 0
ct U SCROLL_H = 1
ct U SCROLL_V = 2

vars /scroll
    // Uses the 'SCROLL_' enums to track what part of the scroll got updated:
    U scroll = SCROLL_NONE

    // 'scroll_x_world' refers to the column serving as the scroll's seam.
    // The units are in 8-pixel tiles. (value of 3 means 24 pixels)
    UU scroll_x_world = 0
    UU scroll_y_world = 0
    U scroll_y_screen = 0

    // These track the PPUADDR we'll be modifying in during NMI:
    UU scroll_tiles_ppuaddr = 0
    UU scroll_attrs_ppuaddr = 0

    // The data we'll upload to the PPU during NMI.
    U[32] scroll_tiles
    U[8] scroll_attrs


// This function prepares the updates for scrolling in the horizontal direction.
// (You'll have to call ppu_upload_scroll later to send the updates to the PPU!)
fn update_scroll_h(Bool scroll_left)
    scroll = SCROLL_H

    CCC/levels ptr = current_level

    // 'seam' is used to calculate which column of the nametable we're updating.
    // It's directly correlated with 'scroll_x_world'.
    UU seam

    // Adjust our scroll values and set the seam:
    if scroll_left
        scroll_x_world -= 1
        seam = scroll_x_world
    else
        seam = scroll_x_world
        ptr += 16
        scroll_x_world += 1

    // Adjust 'ptr' to point to the upper tile (by screen position) of our seam.
    ptr += (seam >> 1) + UU(((scroll_y_world >> 1) * current_level_width))

    // First, we'll update the attributes.

    // Attributes will have their own seam, and two versions of `ptr`,
    // as each attribute is comprised of four 16x16 tiles.
    CCC/levels attr_w = ptr
    CCC/levels attr_e = ptr
    U attr_seam = seam.a

    // Adjust the attribute seam based on scroll direction:
    if scroll_left
        if (attr_seam) & %10
            attr_w += 15
        else
            attr_e += 1
    else
        attr_seam -= 1
        if (attr_seam) & %10
            attr_w -= 1
        else
            attr_e -= 15

    if attr_seam & %1 == U(scroll_left)
        scroll_attrs_ppuaddr = $23C0 + UU((attr_seam & %11111) >> 2)
        U start = scroll_y_screen >> 2
        U a = scroll_y_screen >> 2

        if scroll_y_screen & %10
            attr_w -= current_level_width
            attr_e -= current_level_width

        for U y = 0; y < 8; y += 1
            U nw = mt_ca[attr_w[0]] & %11
            U ne = mt_ca[attr_e[0]] & %11
            attr_w += current_level_width
            attr_e += current_level_width
            U sw = mt_ca[attr_w[0]] & %11
            U se = mt_ca[attr_e[0]] & %11
            if a != 7
                attr_w += current_level_width
                attr_e += current_level_width
            U attr = nw | (ne << 2) | (sw << 4) | (se << 6)
            scroll_attrs[a] = attr
            a = (a + 1) & %111

        // Fix up the seam
        if scroll_y_screen & %10
            U nw = mt_ca[attr_w[0]] & %11
            U ne = mt_ca[attr_e[0]] & %11
            scroll_attrs[start] &= %11110000
            scroll_attrs[start] |= nw | (ne << 2)
    else
        scroll_attrs_ppuaddr = 0

    // Determine if we're scrolling the north or south side of our metatiles:
    CC/metatiles n = mt_nw
    CC/metatiles s = mt_sw
    if seam & 1
        n = mt_ne
        s = mt_se

    scroll_tiles_ppuaddr = $2000 + UU(seam & %11111)

    // Set 'scroll_tiles':
    U start = scroll_y_screen & U(~1)

    for U i = start; i < 30; i += 2
        U tile = ptr[0]
        scroll_tiles[i+0] = n[tile]
        scroll_tiles[i+1] = s[tile]
        ptr += current_level_width

    for U i = 0; i < start; i += 2
        U tile = ptr[0]
        scroll_tiles[i+0] = n[tile]
        scroll_tiles[i+1] = s[tile]
        ptr += current_level_width

    if scroll_y_screen & 1
        scroll_tiles[start] = n[ptr[0]]

// This function prepares the updates for scrolling in the vertical direction.
// (You'll have to call ppu_upload_scroll later to send the updates to the PPU!)
fn update_scroll_v(Bool scroll_up)
    scroll = SCROLL_V

    CCC/levels ptr = current_level
    UU seam

    if scroll_up
        scroll_y_world -= 1
        if !(scroll_y_screen -= 1)
            scroll_y_screen = 29
        seam = scroll_y_screen
        ptr += UU((scroll_y_world >> 1) * 64)
    else
        ptr += UU(((scroll_y_world >> 1) + 15) * current_level_width)
        seam = scroll_y_screen
        scroll_y_world += 1
        scroll_y_screen += 1
        if scroll_y_screen == 30
            scroll_y_screen = 0

    scroll = SCROLL_V

    ptr += (scroll_x_world >> 1)

    CCC/levels attr_n = ptr
    CCC/levels attr_s = ptr

    U attr_seam = seam.a

    if scroll_up
        if (attr_seam) & %10
            attr_n += 14 * current_level_width
        else
            attr_s += current_level_width
    else
        attr_seam -= 1
        if (attr_seam) & %10
            attr_n -= current_level_width
        else
            attr_s -= 14 * current_level_width

    // Set 'scroll_attrs':
    if attr_seam & %1 == U(scroll_up)
        scroll_attrs_ppuaddr = $23C0 + UU((attr_seam & %11100) << 1)
        U start = (scroll_x_world.a >> 2) & %111
        U a = start

        if scroll_x_world & %10
            attr_n -= 1
            attr_s -= 1

        U i = 0
        for U x = 0; x < 8; x += 1
            U nw = mt_ca[attr_n[i]] & %11
            U sw = mt_ca[attr_s[i]] & %11
            i += 1
            U ne = mt_ca[attr_n[i]] & %11
            U se = mt_ca[attr_s[i]] & %11
            i += 1
            U attr = nw | (ne << 2) | (sw << 4) | (se << 6)
            scroll_attrs[a] = attr
            a = (a + 1) & %111

        // Fix up the seam
        if scroll_x_world & %10
            U nw = mt_ca[attr_n[16]] & %11
            U sw = mt_ca[attr_s[16]] & %11
            scroll_attrs[start] &= %11001100
            scroll_attrs[start] |= nw | (sw << 4)
    else
        scroll_attrs_ppuaddr = 0

    // Determine if we're scrolling the west or east side of our metatiles:
    CC/metatiles w = mt_nw
    CC/metatiles e = mt_ne
    if seam & 1
        w = mt_sw
        e = mt_se
        
    scroll_tiles_ppuaddr = $2000 + (UU(seam) << 5)

    // Set 'scroll_tiles':
    U i = scroll_x_world.a & U(~1)
    for U x = 0; x < 16; x += 1
        U tile = ptr[x]
        scroll_tiles[i & %11111] = w[tile]
        i += 1
        scroll_tiles[i & %11111] = e[tile]
        i += 1

    if scroll_x_world.a & 1
        scroll_tiles[i & %11111] = w[ptr[16]]

fn update_scroll()
    if scroll_x_world < (camera_x_world + 7) >> 3 // If we're scrolling right:
        update_scroll_h(false)
    else if scroll_x_world > (camera_x_world + 7) >> 3 // If we're scrolling left:
        update_scroll_h(true)
    else if SS(scroll_y_world) < SS(camera_y_world >> 3) - 1 // If we're scrolling down:
        update_scroll_v(false)
    else if SS(scroll_y_world) > SS(camera_y_world >> 3) - 1 // If we're scrolling up:
        update_scroll_v(true)
    else // Not scrolling:
        scroll = SCROLL_NONE

fn ppu_upload_scroll()
: +inline
    {PPUSTATUS}() // Reset the address latch before 'ppu_set_addr', just to be safe.

    if scroll == SCROLL_V // Vertical scrolling update:
        ppu_set_addr(scroll_tiles_ppuaddr)

        // Upload the tiles:
        for U i = 0; i < 32; i += 1
            {PPUDATA}(scroll_tiles[i])

        // Upload the attributes, if they exist:
        if scroll_attrs_ppuaddr
            ppu_set_addr(scroll_attrs_ppuaddr)
            for U i = 0; i < 8; i += 1
                {PPUDATA}(scroll_attrs[i])

    else if scroll == SCROLL_H // Horizontal scrolling update:
        // We're using VRAM_32_DOWN for this, 
        // as the seam is a vertical column of tiles.
        {PPUCTRL}(PPUCTRL_VRAM_32_DOWN)
        ppu_set_addr(scroll_tiles_ppuaddr)

        // Upload the tiles:
        for U i = 0; i < 30; i += 1
            {PPUDATA}(scroll_tiles[i])

        // Upload the attributes, if they exist:
        if scroll_attrs_ppuaddr
            // Because we're using PPUCTRL_VRAM_32_DOWN, we'll upload attributes like this:
            UU addr = scroll_attrs_ppuaddr
            for U i = 0; i < 4; i += 1
                ppu_set_addr(addr)
                addr += 8
                {PPUDATA}(scroll_attrs[0 + i])
                {PPUDATA}(scroll_attrs[4 + i])

    // Disable the scroll updates until it's updated again:
    scroll = SCROLL_NONE
