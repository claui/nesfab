/*
 * Copyright (c) 2022, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// RNG means random number generator.
// This file contains code for generating random numbers.

vars
    U[2] rng_state = U[2](1, 1)

// Helper function for setting 'rng_state'.
fn seed(UU value)
: +inline
    if value == 0
        value = $BEEF
    rng_state[0] = value.a
    rng_state[1] = value.b

// Returns a pseudo-random 8-bit value.
asm fn rand() U
: employs
    default
        lda &rng_state+0
        asl
        rol &rng_state+1
        bcc done_xor_0
        eor #$2D // apply XOR feedback whenever a 1 bit is shifted out
    label done_xor_0
        asl
        rol &rng_state+1
        bcc done_xor_1
        eor #$2D
    label done_xor_1
        sta &rng_state+0
        sta &return
        rts

// Returns a pseudo-random 16-bit value.
fn rand_uu() UU
: +inline
    UU result
    result.a = rand()
    result.b = rand()
    return result

// Returns a pseudo-random 24-bit value.
fn rand_uuu() UUU
: +inline
    UUU result
    result.a = rand()
    result.b = rand()
    result.c = rand()
    return result

// Returns a bitmask that can hold any value less than or equal to argument 'num'.
// Undefined behavior if 'num' is 0.
asm fn _ceil_mask(U num) U
: employs
    default
        ldx #$FF
        lda &num
        sec
        sbc #1
    label loop
        inx
        lsr
        bne loop
        lda table, x
        sta &return
        rts
    label table
        U[8](%1, %11, %111, %1111, %11111, %111111, %1111111, %11111111)

// Returns a random value less than 'bound', or 0 if 'bound' is 0.
fn randb(U bound) U
    if !bound
        return 0
    U mask = _ceil_mask(bound)
    U result
    do while result >= bound
        result = rand() & mask
    return result
